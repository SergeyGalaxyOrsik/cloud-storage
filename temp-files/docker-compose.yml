version: '3.8'

services:
  # Message Broker
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Databases
  postgres-auth:
    image: postgres:15
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME:-authdb}
      POSTGRES_USER: ${AUTH_DB_USER:-user}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-password}
    ports:
      - "5433:5432"
    volumes:
      - ./pgdata-auth:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER:-user}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  postgres-file:
    image: postgres:15
    environment:
      POSTGRES_DB: ${FILE_DB_NAME:-filedb}
      POSTGRES_USER: ${FILE_DB_USER:-user}
      POSTGRES_PASSWORD: ${FILE_DB_PASSWORD:-password}
    ports:
      - "5434:5432"
    volumes:
      - ./pgdata-file:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FILE_DB_USER:-user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal services
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: ${TEMPORAL_DB_PASSWORD:-temporal}
      POSTGRES_USER: ${TEMPORAL_DB_USER:-temporal}
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - ./temporal_pg_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEMPORAL_DB_USER:-temporal}"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal:
    container_name: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=${TEMPORAL_DB_PORT:-5432}
      - POSTGRES_USER=${TEMPORAL_DB_USER:-temporal}
      - POSTGRES_PWD=${TEMPORAL_DB_PASSWORD:-temporal}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup
    ports:
      - 7233:7233
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "tctl", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_ADDRESS:-temporal:7233}
    image: temporalio/admin-tools
    stdin_open: true
    tty: true
    networks:
      - app-network

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_ADDRESS:-temporal:7233}
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui
    ports:
      - 8080:8080
    networks:
      - app-network

  # Redis
  redis:
    container_name: redis
    image: redis:latest
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    command: ["redis-server"]
    ports:
      - ${REDIS_PORT:-6379}:6379
    networks:
      - app-network

  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - '5540:5540'
    volumes:
      - ./redisinsight:/db 
    environment:
      - RI_REDIS_HOST=${REDIS_HOST:-redis}
      - RI_REDIS_PORT=${REDIS_PORT:-6379}
    networks:
      - app-network

  # Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Microservices
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: api-gateway
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    depends_on:
      - rabbitmq
      - auth-service
      - file-service
      - minio
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  websocket-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: websocket-gateway
    ports:
      - "${WEBSOCKET_PORT:-3001}:3001"
    depends_on:
      - rabbitmq
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: auth
    depends_on:
      - rabbitmq
      - postgres-auth
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  file-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: file
    depends_on:
      - rabbitmq
      - postgres-file
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  billing-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: billing
    depends_on:
      - rabbitmq
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  storage-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: storage
    depends_on:
      - rabbitmq
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  # Workers
  worker-file:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: worker-file
    depends_on:
      - rabbitmq
      - postgres-file
      - minio
      - temporal
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  worker-get-file:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: worker-get-file
    depends_on:
      - rabbitmq
      - postgres-file
      - minio
      - temporal
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  minio-data:
    driver: local

networks:
  app-network:
    driver: bridge 